# Generated by Django 4.1.2 on 2022-10-30 08:18

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_ar', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('name_en', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('parent_department', models.CharField(blank=True, max_length=100, null=True)),
                ('hidden', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Clearance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, max_length=100, null=True)),
                ('clearance_type', models.CharField(blank=True, choices=[('', 'Select Clearance Type'), ('Annual Vacation', 'Annual Vacation'), ('Compensatory Leave', 'Compensatory Leave'), ('End of Services', 'End of Services'), ('Commissioning', 'Commissioning'), ('Redeployment', 'Redeployment'), ('Delegation', 'Delegation')], max_length=100, null=True)),
                ('acknowledgment_number', models.IntegerField(blank=True, null=True)),
                ('start_date', models.DateField(blank=True, default=django.utils.timezone.now)),
                ('end_date', models.DateField(blank=True, default=django.utils.timezone.now)),
                ('job_title', models.CharField(blank=True, choices=[('', 'Select your Job Title'), ('others', (('Administrative', 'Administrator'), ('Assistant', 'Assistant'), ('Technician', 'Technician'), ('Specialist', 'Specialist'), ('Senior Specialist', 'Senior Specialist'), ('Specialist Consultant', 'Specialist Consultant'), ('Pharmacist', 'Pharmacist'), ('Senior Pharmacist', 'Senior Pharmacist'), ('Consultant Pharmacist', 'Consultant Pharmacist'))), ('Medical Departments', (('Specialist Doctor', 'Specialist Doctor'), ('Consultant Doctor', 'Consultant Doctor'), ('Resident', 'Resident'))), ('Nursing Departments', (('Health Aide', 'Health Aide'), ('Nursing Technician', 'Nursing Technician'), ('Specialist Nurse', 'Specialist Nurse'), ('Senior Specialist Nurse', 'Senior Specialist Nurse'), ('Consultant Specialist Nurse', 'Consultant Specialist Nurse')))], max_length=100, null=True)),
                ('employee_number', models.IntegerField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('', 'Select Gender'), ('Female', 'Female'), ('Male', 'Male')], max_length=50, null=True)),
                ('nationality', models.CharField(blank=True, max_length=50, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=10, null=True)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='media')),
                ('notes', models.TextField(blank=True, null=True)),
                ('classification', models.CharField(blank=True, max_length=50, null=True)),
                ('created', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('Pending for HR initial approval', 'Pending for HR initial approval'), ('Pending for other departments approval', 'Pending for other departments approval'), ('Pending for HR final approval', 'Pending for HR final approval'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending for HR initial approval', max_length=50)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.department')),
            ],
        ),
        migrations.CreateModel(
            name='Approval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending', max_length=50)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('clearance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.clearance')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.department')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.department')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
